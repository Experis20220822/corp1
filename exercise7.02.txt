Exercise 7.02: Stack Overflow
The goal of this exercise is to rewrite the stack overflow function so that it accounts for as many other inputs as it can. Think about all the possible arguments this function could be called with, and how the function will handle each one. Let's get started:

Let's go through a few possible inputs to make sure we're accounting for all eventualities, thereby minimizing the risk of an error occurring. Here are some of the edge cases we need to be careful of:
The num input is odd.
The input is 0.
This input is less than 0.
The input is null or is not of a number type.
For now, let's assume that we want the function to return whenever the input is not a number or is a negative number, and if it's 0, then we want the function to log 0 to the console and return. Write the function as follows:
function countdownByTwo(num) {

  if (typeof num !== 'number' || num< 0) return;

  console.log(num);

  countdownByTwo(num - 2);

}

Here, we've added a termination condition using the typeof operator to determine whether the input, num, is a number as expected. We will return undefined if it's not of a number type or if it's a number less than 0. If num is a number, and it's greater than or equal to 0, then the function will log the value of num and call itself again with num –2, and so the cycle repeats.

By making these changes to the function, we are accounting for the initial input of an odd number, which would have bypassed our termination condition in the original function. We're also accounting for inputs where num is not of type number; say, a string or an object. But there are also some less obvious edge cases we need to be aware of. Let's see what happens when we call a function like this:
countdownByTwo('bananas' * 2)

It turns out that multiplying bananas by 2 doesn't make any sense: JavaScript cannot coerce the result to a numerical value, and therefore it results in a value of NaN.

And what does this mean for our function? To answer that question, we need to establish what data type the NaN property is. You'd be forgiven for assuming that running typeof NaN would return something – anything – other than number, but you'd be wrong. As we saw in the previous chapter, NaN is a property of the Number object and is indeed of the number type. This results in yet another stack overflow, with the function logging NaN repeatedly until the maximum call stack size is reached.

A similar problem would also occur when calling the function with Infinity, so it's clear that we need to add another check in our isFinite() function that returns true if its input is a finite and legal number to handle these edge cases:
function countdownByTwo(num) {

  if (typeof num !== 'number' || num< 0 || !isFinite(num)) return;

  console.log(num);

  countdownByTwo(num - 2);

}

This function is used so that we can remove the typeof operator check. Now, we have a fairly robust set of termination cases for this function. There may still be other checks we would want to implement, such as limiting the size of the number that the function will count down from. For example, if we wanted to make sure the input is less than 10,000, we could amend our if statement to the following:
if (num< 0 || num> 10000 || !isFinite(num)) return;


In this exercise, we've seen a basic example of how we may inadvertently write code that works poorly with the JavaScript engine, and that we should handle as many different edge cases that our code may be presented with as possible.