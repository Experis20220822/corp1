Create a new HTML file including a button tag with the ID exampleButton. This button will be our target:
<html>

  <body>

    <button id="exampleButton">Click me.</button>

  </body>

</html>

Find the latest jQuery CDN URL.
Read the jQuery documentation for .on() :


Load in the CDN URL:
<html>

  <head>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.4.1/jquery.min.    js"></script>

  </head>

  <body>

    <button id="exampleButton">Click me.</button>

  </body>

</html>

Create a script tag containing code that logs a Hello World message to the console when you click the button:
<html>

  <head>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.4.1/jquery.min.    js"></script>

  </head>

  <body>

    <button id="exampleButton">Click me.</button>

    <script type="text/javascript">

      $('#exampleButton').on('click', function() {

        console.log('Hello World')

      })

    </script>

  </body>

</html>

Make sure you place the script tag after the button tag.
Open the HTML in your browser and open the dev tool console.
Press the Click me. button and verify that it prints Hello World to the console:


In this exercise, you handled an event that got fired by the browser on a button click using jQuery. The handler you implemented prints Hello World to the browser's console as soon as the click me button is pressed.

You also saw how easy it is to use a library such as jQuery to do work that, otherwise, you would need to do manually.

Handling a click event, however, is not particularly hard to do in vanilla.js either, as you'll see in the next exercise.

Exercise 4.03: Handling the Same Event with Vanilla.js
In contrast to the previous exercise, this one demonstrates how to create a handler that gets triggered on a click event using plain JavaScript. Let's get started:

Create a new HTML file that includes a button tag with the ID exampleButton:
<html>

  <body>

    <button id="exampleButton">Click me.</button>

    </body>

</html>

Create a script tag containing vanilla.js code that logs a Hello World message to the dev tools console when you click the button. addEventListener is a vanilla API provided to us by the browser. It takes eventType and handlerFunction as parameters:
<html>

  <body>

    <button id="exampleButton">Click me.</button>

    <script type="text/javascript">

      const button = document.querySelector('#exampleButton')

      button.addEventListener('click', function() {

        console.log('Hello World')

      })

    </script>

  </body>

</html>

Again, make sure you place the script tag after the button tag.

Open the HTML in your browser and open the dev tools console. Press the "Click me." button and verify that it prints "Hello World" to the console:


Exercise 4.04: Animating a "Peek-a-boo" on Button Click
In this exercise, you will build on the knowledge you have gained regarding how to handle events using jQuery. The relevant part, however, will be animating an element on the page.

Whenever the "Peek…" button is clicked, the …a-boo headline will show up. Let's get started:

Create a new HTML file that includes a button tag with the ID Peek..., a headline with the ID …a-boo, and a display: none style attribute:
<html>

  <head></head>

  <body>

    <button id="peek">Peek...</button>

    <h1 id="aboo" style="display: none;">...a-boo</h1>

  </body>

</html>

Load the latest jQuery CDN URL, from cdnjs.com (see Exercise 2, Handling Click Events with jQuery, step 2), inside a script tag:
<html>

  <head>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.4.1     /jquery.min.js"></script>

  </head>

  <body>

    <button id="peek">Peek...</button>

    <h1 id="aboo" style="display: none;">...a-boo</h1>

  </body>

</html>

Create a script tag containing the code to select the peek button and add an onClick event listener:
<html>

  <head>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.4.1/jquery.min.    js"></script>

  </head>

  <body>

    <button id="peek">Peek...</button>

    <h1 id="aboo" style="display: none;">...a-boo</h1>

    <script type="text/javascript">

      const peekButton = $('#peek');

      peekButton.on('click', function() {});

    </script>

  </body>

</html>

Inside the new script tag, write additional code to select the aboo headline and use the jQuery.fadeToggle function to animate the headline so that it's fading in and fading out:
<html>

  <head>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.4.1/jquery.min.    js"></script>

  </head>

  <body>

    <button id="peek">Peek...</button>

    <h1 id="aboo" style="display: none;">...a-boo</h1>

    <script type="text/javascript">

      const peekButton = $('#peek');

      const abooHeadline = $('#aboo');

      peekButton.on('click', function() {

        abooHeadline.fadeToggle();

      });

    </script>

  </body>

</html>

Open the HTML page in your browser and click the peek button.
You should see the aboo headline fading in and fading out whenever you click the peek button:


In this exercise, you used jQuery to execute yet another type of task in the browser. Animations in UIs can be as simple as our fading example, but they can also be very complex when building games or creating 3D animations.

Exercise 4.05: Rendering a List of To-Dos Using React
In this exercise, we're going to display a few list tags as bullet points of an imaginary todo list. To do so, we'll be using a massively popular library called react.js and its complementary react-dom.js. Let's get started:

Create a new empty HTML file with a head and a div tag with the root ID inside the HTML body:
<html>

  <head></head>

  <body>

    <div id="root"></div>

  </body>

</html>

Go to cdnjs.com and to get the latest react.js and react-dom.js CDN URLs and load the URLs into a script tag inside the HTML head:
<script src="https://cdnjs.cloudflare.com/ajax/libs/react/16.9.0/umd/react.production.min.js" charset="utf-8"></script>

<script src="https://cdnjs.cloudflare.com/ajax/libs/react-dom/16.8.6/umd/react-dom.production.min.js" charset="utf-8"></script>

Use react.js and react-dom to create three list items and render them to the root div-element:
  <script type="text/javascript">

    const todoListItems = [

      'buy flowers',

      'tidy up',

      'go to the gym'

    ];

    const todoListElements = todoListItems.map(item =>

      React.createElement('li', null, item)

    );

    ReactDOM.render(todoListElements, document.getElementById('root'));

  </script>

Open the HTML page inside your browser and make sure that your todo list items are displayed correctly.
Open the network tab of your browser's dev tools and have a glance at how many kilobytes of JavaScript were loaded

In this exercise, you learned where to find and how to use React.js. Although in this exercise you simply created a small, static list of To-Dos, React.js lets you create complex, dynamic UIs without you having to worry about native browser APIs that you would normally need to create such UIs. However, as we mentioned previously, using a framework also comes at a cost, measured in kilobytes.

Next, you will learn how to do the same task without React. Afterward, you will be able to understand the kilobytes versus complexity trade-off when building applications.

Exercise 4.06: Rendering a List of To-Dos without a Library
In the previous exercise, we used the trendy library known as React.js to load more than 37 KB (in ZIP format) and a couple of hundred bytes for the HTML, including the script tags, to create and render a list of three items. In this exercise, we are going to do the same thing, except we will utilize all the functionality that's already provided by the browser. Let's get started:

Create a new empty HTML file with a div tag with an ID of root inside the HTML body:
<html>

  <body>

    <div id="root"></div>

  </body>

</html>

Create a script tag and write some JS to create three list items and render them to the root div element:
index.html

4 <script type="text/javascript">

5  const todoListItems = [

6    'buy flowers',

7    'tidy up',

8    'go to the gym'

9   ];

10  const rootElement = document.getElementById('root');

11  const listFragment = document.createDocumentFragment();

12  todoListItems.forEach(item => {

13   const currentItemElement = document.createElement('li');

14   currentItemElement.innerText = item;

15   listFragment.appendChild(currentItemElement)

16   });



Open the HTML page inside your browser and make sure your todoListItems are presented correctly.
Open the network tab of your browser's dev tools and have a glance at how many kilobytes of JavaScript were loaded


There's exactly no, that is, 0 KB, additional JavaScript. That gives us 37 KB of downloading, parsing, and execution advantage over the method using react.js, all while achieving the same thing.

Of course, this is a simplified example. In general, real-world applications are more complex than our exercise. Nonetheless, you may often find yourself in an analogous situation where performance is a thing to consider and the task can plausibly be done using vanilla.js.

We have spoken in detail about what libraries and frameworks are and what they can help us to do. In order to really grasp what libraries may look like internally and how easy it actually is to build one, we'll be creating one ourselves in the following exercise.

Exercise 4.07: Creating a Library Yourself
Our library won't be capable of much at first, but you may want to put some effort into it and extend it as you wish.

HeadlineCreator.js is our library's name. It's a good name because it already hints at what it does; that is, it creates headlines. Technically speaking, our library will do the following:

Be accessible on the global window object of the current browser tab, just as we've seen with jQuery before: window.headlineCreator.
Provide a single method called createHeadline.
Allow us (through the createHeadline method) to create a headline with the given text and append it to a given parent element.
Take care of error handling for us, for instance, if we forgot to define some text to be displayed or passed an invalid selector for the parent element
To verify that our library is working and having an example of its usage, we will create, additional to creating the library itself, an HTML page including script tags using our HeadlineCreator.js library.
Let's get started:

Create an empty HTML file with a head tag, a body tag, and a div tag with an ID of root inside it:
<html>

  <head></head>

  <body>

    <div id="root"></div>

  </body>

</html>

Load a local JS file with the name headlineCreator.js inside a script tag:
<html>

  <head>

    <script src="./headlineCreator.js"></script>

  </head>

  <body>

    <div id="root"></div>

  </body>

</html>

Create the headlineCreator.js file inside of the same directory you created the empty HTML file in.
Inside the JavaScript file, create an IIFE(immediately invoked function expression) and assign it to the headlineCreator variable:
// headlineCreator.js

const headlineCreator = (function(){})();

Note

IIFE stands for "immediately invoked function expression." This sounds more complicated than it is. IIFEs are functions that are executed at the very same moment they are defined. One use case for them in frameworks or libraries is to prevent name collisions with variables that are used in the source code. This includes the library. For example, using a create function within your library can cause weird side effects since this is a very common and ambiguous name. Hence, the library could be a different function than it was supposed to be.

Within the IIFE, create another function and name it createHeadline. This function takes two parameters, text and parentElementSelector:
// headlineCreator.js

const headlineCreator = (() => {

function createHeadline(text, parentElementSelector = '#root') {}

})();

Inside the IIFE headlineCreator, add a return statement. This return statement will return an object with a single key named createHeadline that has the value of the same name (just like the function name we created in the previous step):
{}return {

createHeadline: createHeadline

};

Extend the new function with a DOM query to look for an element with the parentElementSelector that is passed as an argument to the createHeadline function.
Assign the result of the DOM query to a variable called parentElement:
const parentElement = document.querySelector(parentElementSelector);

Next, create an h1 tag element and set the innerText attribute of this element to the text parameter that is passed to the function:
const headlineToInsert = document.createElement('h1');

headlineToInsert.innerText = text;

Lastly, append the created headline to the node that we stored in parentElement:
parentElement.appendChild(headlineToInsert);

Refresh your HTML page and inside the dev tools console, call the window.headlineCreator.createHeadline function with any parameter you'd like. Then, view the result:
Figure 4.13: The window.headlineCreator.createHeadline function in the console and its output
Figure 4.13: The window.headlineCreator.createHeadline function in the console and its output

If you'd like to, you can add some error handling and return the newly created headline element since that's considered good practice in such a case:
headlineCreator.js

1 // headlineCreator.js

2 window.headlineCreator = (function() {

3   function createHeadline(text, parentElementSelector = '#root') {

4     const parentElement = 5 document.querySelector(parentElementSelector);

5    if (!text) {

6       throw new Error('You forgot to pass the "text" parameter');

7     }

8     if (!parentElement) {

9       throw new Error(

10         `There was no node found for the Selector: "${parentElementSelector}"`

11       );

12     }


To test the error handling, simply call the headlineCreator function without the text parameter

Last but not least, add a script tag to the HTML file and call the headlineCreator library from there so that every time the HTML is loaded, a headline is created:
<html>

  <head>

    <script src="./headlineCreator.js" charset="utf-8"></script>

  </head>

  <body>

    <div id="root"></div>

    <script type="text/javascript">

      headlineCreator.createHeadline('This is the HeadlineCreator');

    </script>

  </body>

</html>



Going through this exercise has taught you that the inner workings of a library don't have to be complex and hard to understand. The headlineCreator library lets the user create and append a headline to a given parent element. Even though this is a simplified and almost trivial use case, it demonstrates the basic process of building and using a library – that is, having a programmatic problem, finding a solution to it, abstracting the complexity, and providing it to others through a library.